<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.shawn.sales.persistance.UserDao">
	<resultMap id="BaseResultMap" type="User">
		<id column="id" property="id" jdbcType="BIGINT" />
		<result column="loginName" property="loginName" />
		<result column="userName" property="userName" />
		<result column="password" property="password" />
		<result column="email" property="email" />
		<result column="role" property="role" />
		<result column="isDeleted" property="isDeleted" />
		<result column="createTime" property="createTime" />
		<result column="updateTime" property="updateTime" />
	</resultMap>

	<sql id="Table_Name">
		`user`
	</sql>
	<sql id="Simple_Column_List">
		id,loginName,userName,password,email,role,isDeleted,createTime,updateTime
	</sql>
	<sql id="Base_Column_List">
		id,loginName,userName,password,email,role,isDeleted,createTime,updateTime
	</sql>

	<insert id="create" parameterType="User">
		<selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>
		INSERT INTO
		<include refid="Table_Name" />
		<trim prefix="(" suffix=")" suffixOverrides=",">
			id,
			<if test="loginName != null">
				loginName,
			</if>
			<if test="userName != null">
				userName,
			</if>
			<if test="password != null">
				password,
			</if>
			<if test="email != null">
				email,
			</if>
			<if test="role != null">
				role,
			</if>
			<if test="isDeleted != null">
				isDeleted,
			</if>
			<if test="createTime != null">
				createTime,
			</if>
			<if test="updateTime != null">
				updateTime,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			#{id,jdbcType=BIGINT},
			<if test="loginName != null">
				#{loginName},
			</if>
			<if test="userName != null">
				#{userName},
			</if>
			<if test="password != null">
				#{password},
			</if>
			<if test="email != null">
				#{email},
			</if>
			<if test="role != null">
				#{role},
			</if>
			<if test="isDeleted != null">
				#{isDeleted},
			</if>
			<if test="createTime != null">
				#{createTime},
			</if>
			<if test="updateTime != null">
				#{updateTime},
			</if>
		</trim>
	</insert>
	<update id="updateIfNecessary" parameterType="User">
		UPDATE
		<include refid="Table_Name" />
		<set>
			<if test="loginName != null">
				loginName = #{loginName},
			</if>
			<if test="userName != null">
				userName = #{userName},
			</if>
			<if test="password != null">
				password = #{password},
			</if>
			<if test="email != null">
				email = #{email},
			</if>
			<if test="role != null">
				role = #{role},
			</if>
			<if test="isDeleted != null">
				isDeleted = #{isDeleted},
			</if>
			<if test="createTime != null">
				createTime = #{createTime},
			</if>
			<if test="updateTime != null">
				updateTime = #{updateTime},
			</if>
		</set>
		WHERE id = #{id}
	</update>
	<update id="update" parameterType="User">
		UPDATE
		<include refid="Table_Name" />
		SET 
		<![CDATA[
		loginName = #{loginName},
		userName = #{userName},
		password = #{password},
		email = #{email},
		role = #{role},
		isDeleted = #{isDeleted},		
		create_time = 	#{createTime},
		update_time = #{updateTime}
		WHERE id = #{id,jdbcType=BIGINT}
		]]>
	</update>

	<select id="getById" parameterType="long" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List" />
		FROM
		<include refid="Table_Name" />
		WHERE `id` = #{id}
	</select>

	<delete id="delete" parameterType="long">
		DELETE FROM
		<include refid="Table_Name" />
		WHERE `id` = #{id}
	</delete>

	<!-- custom sql -->
	<select id="getUserByLoginName" parameterType="string" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List" />
		FROM
		<include refid="Table_Name" />
		WHERE loginName = #{loginName}
		<![CDATA[and isDeleted = 0]]>
		LIMIT 0,1
	</select>

	<select id="getList" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from
		<include refid="Table_Name" />
		where isDeleted = 0
		order by id desc
		limit #{start},#{count}
	</select>

	<select id="getListCount" resultType="integer">
		select
		count(*)
		from
		<include refid="Table_Name" />
		where isDeleted = 0
	</select>

	<select id="getCountByLoginName" resultType="integer">
		select
		count(*)
		from
		<include refid="Table_Name" />
		where isDeleted = 0 and loginName = #{loginName}
	</select>
	<select id="getByLoginName" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from
		<include refid="Table_Name" />
		where isDeleted = 0 and loginName = #{loginName}
	</select>
	<select id="getAllAdmin" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from
		<include refid="Table_Name" />
		where isDeleted = 0 and role = 0
	</select>
</mapper>